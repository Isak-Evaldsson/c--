%{
#include <stdio.h>
#include "ast.h"
#include "util.h"
#include "errormsg.h"

// Lexing function generated by flex
int yylex(void);

// Root node for ast 
AST_prototype *ast_root;

// Bison error handling function
void yyerror(char *s)
{
    EM_error(EM_tokPos, "%s", s);
}
%}

%union {
        // Terminal types
        int pos;
        int ival;
        char* sval;

        // Non-terminal types
        AST_prototype *proto;
        AST_param_list *param;
       }

%token <sval> ID
%token  INT
        LPAREN 
        RPAREN
        SEMI       


%type <proto> prototype
%type <param> param_list
%type <sval>  param

%start program

%%
program: prototype { ast_root = $1; }

prototype: INT ID LPAREN param_list RPAREN SEMI { $$ = create_prototype_ast($2, $4); }

param_list:
    /* epsiolon */      { $$ = NULL; }
    | param param_list  { $$ = create_param_list($1, $2); }

param: INT ID           { $$ = $2; }
